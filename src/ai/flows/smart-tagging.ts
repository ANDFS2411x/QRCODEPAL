// This file is generated by Firebase Genkit.
// Manual changes to this file may be overwritten.

'use server';

/**
 * @fileOverview Automatically categorizes the content type of a scanned QR code using an LLM.
 *
 * - smartTagQrCode - A function that handles the QR code content type categorization process.
 * - SmartTagQrCodeInput - The input type for the smartTagQrCode function.
 * - SmartTagQrCodeOutput - The return type for the smartTagQrCode function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';
import {getQrCodeContentType, QrCodeContentType} from '@/services/qr-code';

const SmartTagQrCodeInputSchema = z.object({
  qrCodeData: z.string().describe('The data encoded in the QR code.'),
});
export type SmartTagQrCodeInput = z.infer<typeof SmartTagQrCodeInputSchema>;

const SmartTagQrCodeOutputSchema = z.object({
  contentType: z.string().describe('The categorized content type of the QR code data.'),
});
export type SmartTagQrCodeOutput = z.infer<typeof SmartTagQrCodeOutputSchema>;

export async function smartTagQrCode(input: SmartTagQrCodeInput): Promise<SmartTagQrCodeOutput> {
  return smartTagQrCodeFlow(input);
}

const qrCodeContentTypeTool = ai.defineTool({
  name: 'getQrCodeContentType',
  description: 'Retrieves the content type of a QR code from an external API.',
  inputSchema: z.object({
    qrCodeData: z.string().describe('The data encoded in the QR code.'),
  }),
  outputSchema: z.object({
    contentType: z.string().describe('The content type of the QR code data.'),
  }),
},
async input => {
  return await getQrCodeContentType(input.qrCodeData);
});

const smartTagQrCodePrompt = ai.definePrompt({
  name: 'smartTagQrCodePrompt',
  tools: [qrCodeContentTypeTool],
  input: {
    schema: z.object({
      qrCodeData: z.string().describe('The data encoded in the QR code.'),
    }),
  },
  output: {
    schema: z.object({
      contentType: z.string().describe('The categorized content type of the QR code data.'),
    }),
  },
  prompt: `You are an AI assistant designed to categorize the content of QR codes.

  Based on the QR code data, determine the most appropriate content type (e.g., 'Product', 'Article', 'Social Media Profile', 'Website', etc.).
  Consider using the getQrCodeContentType tool if you are unsure of the content type.

  QR Code Data: {{{qrCodeData}}}`, // Make sure the prompt input is `qrCodeData` not 'input'
});

const smartTagQrCodeFlow = ai.defineFlow<
  typeof SmartTagQrCodeInputSchema,
  typeof SmartTagQrCodeOutputSchema
>({
  name: 'smartTagQrCodeFlow',
  inputSchema: SmartTagQrCodeInputSchema,
  outputSchema: SmartTagQrCodeOutputSchema,
}, async input => {
  const {output} = await smartTagQrCodePrompt(input);
  return output!;
});

